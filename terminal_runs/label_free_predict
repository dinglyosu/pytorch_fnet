#!/bin/env python

# Standard packages
import os
import math
import json
import numpy as np

# For image data
from aicsimage.io.cziReader import CziReader
from aicsimage.io.omeTifReader import OmeTifReader
from aicsimage.io.omeTifWriter import OmeTifWriter
import scipy.ndimage

# Download the model
import torch
import fnet
import fnet.transforms

# Model weights
from quilt.data.aics import label_free

import argparse

# Function to predict an output image using the model provided
def predict_img(img, models, transforms, fn, bright_i=-1):
    predictions = list()

    # Prep the image for input into the model
    img = img[:, bright_i,:,:]
    img = fnet.transforms.prep_ndarray(img, transforms)
    img = fnet.transforms.ndarray_to_tensor(img)

    for model in models:
        # Predict the lamin structure and convert back to ndarray
        predicted = model.predict(img)
        predicted = fnet.transforms.tensor_to_ndarray(predicted)

        predictions.append(predicted)

    writer = OmeTifWriter(fn)
    writer.save(np.stack(predictions))

def recurse_predict(p, models, transforms, structs, bright_i=-1):
    if os.path.isdir(p):
        for sub in os.listdir(p):
            ignore_dirs = ["predictions",
                            "FailedQC",
                            "TapeOnly"]
            if sub not in ignore_dirs:
                sub_p = p + "/" + sub
                recurse_predict(sub_p, models, transforms, structs, bright_i)

    elif os.path.isfile(p) and ((".tif" in p) or (".czi" in p)):
        store = os.path.dirname(p) + "/predictions/"
        base_fn = os.path.basename(p)
        curr_fn = base_fn.replace(".tif", "")
        curr_fn = curr_fn.replace(".ome", "")
        curr_fn = curr_fn.replace(".czi", "")
        if not os.path.exists(store):
            os.mkdir(store)

        fn = store + curr_fn + "_" + "_".join(structs) + ".ome.tif"

        if not os.path.exists(fn):
            try:
                okay = False
                if p.endswith(".tif"):
                    reader = OmeTifReader(p)
                    okay = True
                elif p.endswith(".czi"):
                    reader = CziReader(p)
                    okay = True

                if okay:
                    img = reader.load()

                    try:
                        predict_img(img, models, transforms, fn, bright_i)
                        print("Saved", structs, "prediction for", base_fn)
                    except Exception as e:
                        print("Failed", structs, "prediction for", base_fn)
                        print("Error:", e)
                else:
                    print("Failed", structs, "prediction for", base_fn)
            except MemoryError:
                print("Failed", fn, "is too large a file...")
        else:
            print("Skipping", base_fn)

    else:
        print("Provided path (", p, ") is not a directory or image file")

def main():
    parser = argparse.ArgumentParser(
        description="CLI tool for generating label free predictions"
    )

    parser.add_argument(dest="config",
                        help="path to the config file")
    args = parser.parse_args()
    opts = json.load(open(args.config))

    if isinstance(opts["structure"], str):
        opts["structure"] = [opts["structure"]]

    if not isinstance(opts["structure"], list):
        raise TypeError("structure should either be a string or list of string")

    models = list()
    for struct in opts["structure"]:
        model = fnet.fnet_model.Model()
        which_struct = getattr(label_free, struct)
        model_fn = which_struct.model()
        model_opts = json.load(open(which_struct.train_options()))
        model.load_state(model_fn, opts["gpu_ids"])
        models.append(model)

    for p in opts["files"]:
        recurse_predict(p,
                        models,
                        model_opts["transform_signal"],
                        opts["structure"],
                        opts["brightfield"])

if __name__ == "__main__":
    main()
